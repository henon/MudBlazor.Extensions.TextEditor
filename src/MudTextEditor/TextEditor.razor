@inject IJSRuntime _jsRuntime
@namespace MudTextEditor
@using MudTextEditor.Internal

<div @ref="@_toolBar">
    @if (Toolbar != null)
    {
        <CascadingValue Value="Toolbar">
            <CascadingValue Value="Fonts">
                <ToolbarContentComp></ToolbarContentComp>
            </CascadingValue>
        </CascadingValue>

    }

    @ToolbarContent
</div>
<div id="@EditorContainerId" @ref="@_quillElement">
    @EditorContent
</div>

@code {
    [Parameter]
    public Toolbar? Toolbar { get; set; }
    [Parameter]
    public List<string>? Fonts { get; set; }
    [Parameter]
    public string? EditorContainerId { get; set; }
    [Parameter]
    public RenderFragment? EditorContent { get; set; }

    [Parameter]
    public RenderFragment? ToolbarContent { get; set; }

    [Parameter]
    public bool? ReadOnly { get; set; } = false;

    [Parameter]
    public string? Placeholder { get; set; } = "Compose an epic...";

    [Parameter]
    public string? Theme { get; set; } = "snow";

    [Parameter]
    public string? DebugLevel { get; set; } = "info";

	private ElementReference _quillElement;
    private ElementReference _toolBar;

    protected override async Task
        OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await Interop.CreateQuill(
                _jsRuntime,
                _quillElement,
                _toolBar,
                ReadOnly,
                Placeholder!,
                Theme!,
                DebugLevel, Fonts);
        }
    }

    public async Task<string> GetText()
    {
        return await Interop.GetText(
            _jsRuntime, _quillElement);
    }

    public async Task<string?> GetHtml()
    {
        return await Interop.GetHtml(
            _jsRuntime, _quillElement);
    }

    public async Task<string?> GetContent()
    {
        return await Interop.GetContent(
            _jsRuntime, _quillElement);
    }

    public async Task LoadContent(string? content)
    {
        var quillDelta =
            await Interop.LoadQuillContent(
                _jsRuntime, _quillElement, content);
    }

    public async Task LoadHtmlContent(string quillHtmlContent)
    {
        var quillDelta =
            await Interop.LoadQuillHtmlContent(
                _jsRuntime, _quillElement, quillHtmlContent);
    }

    public async Task InsertImage(string imageUrl)
    {
        var quillDelta =
            await Interop.InsertQuillImage(
                _jsRuntime, _quillElement, imageUrl);
    }

    public async Task EnableEditor(bool mode)
    {
        var quillDelta =
            await Interop.EnableQuillEditor(
                _jsRuntime, _quillElement, mode);
    }
}